services:
  mongo:
    image: mongo:6
    command: ["mongod", "--replSet", "rs0", "--bind_ip_all"]
    ports:
      - "27018:27017"
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 10
    volumes:
      - mongo-data:/data/db

  mongo-setup:
    image: mongo:6
    depends_on:
      mongo:
        condition: service_healthy
    entrypoint: ["bash", "-lc"]
    command: >
      "mongosh --host mongo:27017 --eval \"rs.initiate({_id:'rs0',members:[{_id:0,host:'mongo:27017'}]})\" || true"

  redis:
    image: redis:7-alpine
    command: ["redis-server", "--appendonly", "yes"]
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 10

  api:
    build:
      context: ./api
      target: development
      args:
        APP_ENV: ${APP_ENV:-development}
    environment:
      - NODE_ENV=development
      - PORT=4000
      - MONGO_URL=mongodb://mongo:27017/rce?replicaSet=rs0
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./api:/app
      - /app/node_modules
    ports:
      - "4000:4000"
    healthcheck:
      test: ["CMD-SHELL", "node -e \"require('http').get('http://localhost:4000/health', r => process.exit(r.statusCode===200?0:1)).on('error', () => process.exit(1))\""]
      interval: 10s
      timeout: 3s
      retries: 10
    depends_on:
      mongo:
        condition: service_healthy
      mongo-setup:
        condition: service_started
      redis:
        condition: service_healthy

  web:
    build:
      context: ./web
      target: development
      args:
        APP_ENV: ${APP_ENV:-development}
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:4000
    volumes:
      - ./web:/app
      - web_node_modules:/app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "node -e \"require('http').get('http://localhost:3000', r => process.exit(r.statusCode===200?0:1)).on('error', () => process.exit(1))\""]
      interval: 10s
      timeout: 3s
      retries: 10

  mailhog:
    image: mailhog/mailhog:latest
    ports:
      - "1025:1025" # SMTP
      - "8025:8025" # Web UI

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=minio
      - MINIO_ROOT_PASSWORD=minio12345
    ports:
      - "9000:9000" # S3 API
      - "9001:9001" # Console
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 10

volumes:
  mongo-data:
  minio-data:
  web_node_modules:
